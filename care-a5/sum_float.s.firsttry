    .globl sum_float

	# var map:
	#   %xmm0:  total
	#   %rdi:   F[n] (base pointer)
	#   %rsi:   n
	#   %rbp:   endptr
    #   %rcx:   tail of queue (where to insert)
    #   %rdx:   head of queue (where to remove)
    #   Q <- empty
    #   for i from 1 to n-1 do:
    # x <- smallest of { head(F), head(Q) }
    # dequeue(x)
    # y <- smallest of { head(F), head(Q) }
    # dequeue(y)
    # enqueue(x+y) -> Q
    # return head(Q)

sum_float:
	push	%rbp
    push    %rcx
    push    %rdx
    push    %rbx                    # used for x smallest
    push    %rsp
    push    %r10
    push    %r11
	xorps   %xmm0, %xmm0            # total <- 0.0
	leaq    (%rdi, %rsi, 4), %rbp   # endptr <- F + n
    mov     %rsp, %rdx                  # keep track of head of queue
    mov     %rsp, %r10
    mov     $1, %r11
    sub     $4, %rdx
loop:
	cmp     %rsi, %r11
	je      endloop                 # while (F < endptr) {
    cmp     %rsp, %rdx
    jle     queue_x_empty
    movsd   (%rdx), %xmm8            # move head of queue into xmm8
    jmp     queue_x_not_empty
queue_x_not_empty:
    ucomiss (%rbp), %xmm8          # F[i] > Q[head]?
    jg      queue_x_greater
queue_x_empty:
    movsd   (%rbp), %xmm8
    add	    $4, %rdi                    #    F++;
    jmp     queue_x_less
queue_x_greater:
    sub     $4, %rdx                    #    Q++
queue_x_less:
    cmp     %rsp, %rdx
    jle      queue_y_empty
    movsd   (%rdx), %xmm9            # move head of queue into xmm9
    jmp     queue_y_not_empty
queue_y_not_empty:
    ucomiss (%rbp),%xmm9           # F[i] > Q[head]?
    jg      queue_y_greater
queue_y_empty:
    movsd   (%rbp), %xmm9
    add	    $4, %rdi                    #    F++;
    jmp     queue_y_less
queue_y_greater:
    sub     $4, %rdx                    #    Q++
queue_y_less:
    addss   %xmm9, %xmm8
	addss   %xmm8, %xmm0           #    total += F[0]
    movsd    %xmm0, (%rsp)
    sub     $4, %rsp
    inc     %r11
	jmp	loop                        # }

endloop:
    movsd (%rdx), %xmm0
    mov %r10, %rsp
    pop %r11
    pop %r10
    pop %rsp
    pop %rbx
    pop %rdx
    pop %rcx
	pop	%rbp
	ret
